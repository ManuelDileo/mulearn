# AUTOGENERATED! DO NOT EDIT! File to edit: 00_kernel.ipynb (unless otherwise specified).

__all__ = ['Kernel', 'LinearKernel']

# Cell

import numpy as np
import pytest

# Cell

class Kernel(object):

    def __init__(self):

        self.precomputed = False

    def compute(self, arg_1, arg_2):

        raise NotImplementedError(
            'this class does not implement the compute method')

    @classmethod
    def get_default(cls):
        r'''Return the default kernel.
        '''

        return LinearKernel()


# Cell

class LinearKernel(Kernel):

    def compute(self, arg_1, arg_2):
        r'''
        Compute the dot product between `arg_1` and `arg_2`, where the
        dot product $x \cdot y$ is intended as the quantity
        $\sum_{i=1}^n x_i y_i$, $n$ being the dimension of both
        $x$ and $y$.

        - `arg_1`: first dot product argument (iterable).

        - `arg_2`: second dot product argument (iterable).

        Returns: kernel value (float).'''

        return float(np.dot(arg_1, arg_2))

    def __repr__(self):
        return 'LinearKernel()'

    def __str__(self):
        return self.__repr__()

    def __eq__(self, other):
        return type(self) == type(other)

    def __ne__(self, other):
        return not self == other

    def __hash__(self):
        return hash('LinearKernel')

    def __nonzero__(self):
        return True